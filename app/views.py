from flask import Flask, render_template, flash, redirect, url_for, session
from app import app
import mysql.connector
from .forms import mlsSearchForm, listingSortForm
from .sqlQueries import *
from .helperMethods import searchDictFromList, mlsResultToDict


def connect_db():
	"""Connects to specific database"""
	return mysql.connector.connect(host = app.config['DBHOST'],password = app.config['DBPASSWORD'], user = app.config['DBUSERNAME'], db=app.config['DATABASE'])


def getLastImportDate():
	"""Returns the value for the last date of an import from the database"""
	db = connect_db()

	result = returnListFromQuery(db,lastImportDate)

	db.close()	
	return result[0][0]

"""creating a currency filter for templates"""
def format_currency(value):
    return "${:,.2f}".format(value)

app.jinja_env.filters['format_currency'] = format_currency


@app.errorhandler(404)
def internal_error(error):
	return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
	return render_template('500.html'), 500


@app.route('/')
def index():
	"""Display search form then return mls listing results based off of submited form data """
	form = mlsSearchForm()
	session['date'] = getLastImportDate()

	return render_template('search.html', form = form)

@app.route('/listing/<int:page>', methods=['GET','POST'])
def listings(page):
	"""Display search form then return mls listing results based off of submited form data """
	form = mlsSearchForm()

	listForm = listingSortForm()
	db = connect_db()
	
	"""this if statement is executed when a user first searches on the initial form and is passed to listing page"""
	if form.validate_on_submit():
		
		
		query = buildListingsQuery(form)


		"""Set display by groups of # form selection to session object"""
		session['displayGroups'] = form.displayGroupSelect.data



		"""set query string in session object"""
		session['query'] = query

		result = returnListFromQuery(db,query)
		db.close()

		"""create dictionary of returned list from sql query for readability"""
		dictList = searchDictFromList(result)
		"""for item in dictList:
			print (item['list_price'])"""
		if len(dictList) == 1:
			return redirect(url_for('record', mlsNum = dictList[0]['mls_num']))
		"""Set current page of listings to session object"""
		session['currentResultPage'] = page

		
		
		"""Set total number of pages in result to session object"""
		if len(dictList) > 0:
			session['numPages'] = int(len(dictList)/form.displayGroupSelect.data)
			if (len(dictList)%form.displayGroupSelect.data != 0):
				session['numPages'] = session['numPages']+1
		else:
			session['numPages'] = 0


		"""Setting default sort order to mlsNum then sorting list of results"""
		session['sortOrder'] = 'MLS ID#'	
		sortedList = sorted(dictList, key=lambda k: k['mls_num']) 

		"""Calc number of rows generated by result query to populate text in result page template"""
		numResults = len(sortedList)

		"""creating sublist from sorted results list to display based on page, # of rows to display per page - 
			if current page isnt max page - display selected number of rows, otherwise select remaining rows if last page"""
		pagedResults = []
		if session['currentResultPage'] != session['numPages']:
			pagedResults = sortedList[(session['currentResultPage']*session['displayGroups'] - session['displayGroups']):(session['currentResultPage']*session['displayGroups'])]
		else:
			pagedResults = sortedList[(session['currentResultPage']*session['displayGroups'] - session['displayGroups']):]
		
		return render_template('result.html', form = listForm, resultCount = numResults, results = pagedResults)


	""" This if statement will be executed if the user sorts on the listing page"""
	if listForm.validate_on_submit():
		
		result = returnListFromQuery(db,session['query'])
		db.close()

		"""create dictionary of returned list from sql query for readability"""
		dictList = searchDictFromList(result)

		"""Calc number of rows generated by result query to populate text in result page template"""
		numResults = len(dictList)

		"""Sorting result list based on new selected sort order, then sortOrder session value is updated"""
		sortedList = []
		if listForm.sortOrderSelect.data == 'MLS ID#':
			sortedList = sorted(dictList, key=lambda k: k['mls_num']) 
		elif listForm.sortOrderSelect.data =='Price Highest to Lowest':
			sortedList = sorted(dictList, key=lambda k: k['list_price'], reverse = True) 
		elif listForm.sortOrderSelect.data =='Price Lowest to Highest':
			sortedList = sorted(dictList, key=lambda k: k['list_price']) 
		session['sortOrder'] = listForm.sortOrderSelect.data

		""" Reset current page to 1 because of new sort order, then generate rows to be displayed for this page"""
		session['currentResultPage'] = 1
		if session['currentResultPage'] != session['numPages']:
			pagedResults = sortedList[session['currentResultPage']*session['displayGroups'] - session['displayGroups'] : session['currentResultPage']*session['displayGroups']]
		else:
			pagedResults = sortedList[(session['currentResultPage']*session['displayGroups']) - session['displayGroups']: ]

		print (session['sortOrder'])
		return render_template('result.html', form = listForm, resultCount = numResults, results = pagedResults)	



	"""This is the default path for this route, this occurs if a user changes pages on the listing page after the initial search"""
	
	result = returnListFromQuery(db,session['query'])
	db.close()

	"""create dictionary of returned list from sql query for readability"""
	dictList = searchDictFromList(result)

	"""Calc number of rows generated by result query to populate text in result page template"""
	numResults = len(dictList)

	"""Sorting result based on sort order in session sortOrder value"""
	sortedList = []
	if session['sortOrder'] == 'MLS ID#':
		sortedList = sorted(dictList, key=lambda k: k['mls_num']) 
	elif session['sortOrder'] =='Price Highest to Lowest':
		sortedList = sorted(dictList, key=lambda k: k['list_price'], reverse = True) 
	elif session['sortOrder'] =='Price Lowest to Highest':
		sortedList = sorted(dictList, key=lambda k: k['list_price']) 

	"""Generate rows to be returned from result listing based on page"""
	session['currentResultPage'] = page
	if session['currentResultPage'] != session['numPages']:
		pagedResults = sortedList[session['currentResultPage']*session['displayGroups'] - session['displayGroups'] : session['currentResultPage']*session['displayGroups']]
	else:
		pagedResults = sortedList[(session['currentResultPage']*session['displayGroups']) - session['displayGroups']: ]
	print (session['sortOrder'])
	return render_template('result.html', form = listForm, resultCount = numResults, results = pagedResults)	


@app.route('/record/<int:mlsNum>')
def record(mlsNum):

	""" Takes mls_num as a url parameter and pass information for that specific listing back"""

	db = connect_db()
	result = mlsResultToDict(db, mlsNum)
	db.close()

	"""	check to see if there exists a record for the mls number incase someone enters url by hand.
		redirects to main search page if not found and displays message informing user"""
	if len(result) < 1:
		flash('Listing for MLS# ' + str(mlsNum) + ' not found.')
		return redirect(url_for('index'))
	
	return render_template('record.html', listing = result)
 
